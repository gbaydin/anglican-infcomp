// automatically generated by the FlatBuffers compiler, do not modify

package infcomp.protocol;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class MultivariateNormal extends Table {
  public static MultivariateNormal getRootAsMultivariateNormal(ByteBuffer _bb) { return getRootAsMultivariateNormal(_bb, new MultivariateNormal()); }
  public static MultivariateNormal getRootAsMultivariateNormal(ByteBuffer _bb, MultivariateNormal obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public MultivariateNormal __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public NDArray priorMean() { return priorMean(new NDArray()); }
  public NDArray priorMean(NDArray obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public NDArray priorSigma() { return priorSigma(new NDArray()); }
  public NDArray priorSigma(NDArray obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public NDArray proposalMean() { return proposalMean(new NDArray()); }
  public NDArray proposalMean(NDArray obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public NDArray proposalSigma() { return proposalSigma(new NDArray()); }
  public NDArray proposalSigma(NDArray obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createMultivariateNormal(FlatBufferBuilder builder,
      int prior_meanOffset,
      int prior_sigmaOffset,
      int proposal_meanOffset,
      int proposal_sigmaOffset) {
    builder.startObject(4);
    MultivariateNormal.addProposalSigma(builder, proposal_sigmaOffset);
    MultivariateNormal.addProposalMean(builder, proposal_meanOffset);
    MultivariateNormal.addPriorSigma(builder, prior_sigmaOffset);
    MultivariateNormal.addPriorMean(builder, prior_meanOffset);
    return MultivariateNormal.endMultivariateNormal(builder);
  }

  public static void startMultivariateNormal(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addPriorMean(FlatBufferBuilder builder, int priorMeanOffset) { builder.addOffset(0, priorMeanOffset, 0); }
  public static void addPriorSigma(FlatBufferBuilder builder, int priorSigmaOffset) { builder.addOffset(1, priorSigmaOffset, 0); }
  public static void addProposalMean(FlatBufferBuilder builder, int proposalMeanOffset) { builder.addOffset(2, proposalMeanOffset, 0); }
  public static void addProposalSigma(FlatBufferBuilder builder, int proposalSigmaOffset) { builder.addOffset(3, proposalSigmaOffset, 0); }
  public static int endMultivariateNormal(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

