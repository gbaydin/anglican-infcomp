// automatically generated by the FlatBuffers compiler, do not modify

package infcomp.protocol;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class UniformContinuous extends Table {
  public static UniformContinuous getRootAsUniformContinuous(ByteBuffer _bb) { return getRootAsUniformContinuous(_bb, new UniformContinuous()); }
  public static UniformContinuous getRootAsUniformContinuous(ByteBuffer _bb, UniformContinuous obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public UniformContinuous __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double priorMin() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double priorMax() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double proposalMode() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double proposalCertainty() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createUniformContinuous(FlatBufferBuilder builder,
      double prior_min,
      double prior_max,
      double proposal_mode,
      double proposal_certainty) {
    builder.startObject(4);
    UniformContinuous.addProposalCertainty(builder, proposal_certainty);
    UniformContinuous.addProposalMode(builder, proposal_mode);
    UniformContinuous.addPriorMax(builder, prior_max);
    UniformContinuous.addPriorMin(builder, prior_min);
    return UniformContinuous.endUniformContinuous(builder);
  }

  public static void startUniformContinuous(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addPriorMin(FlatBufferBuilder builder, double priorMin) { builder.addDouble(0, priorMin, 0.0); }
  public static void addPriorMax(FlatBufferBuilder builder, double priorMax) { builder.addDouble(1, priorMax, 0.0); }
  public static void addProposalMode(FlatBufferBuilder builder, double proposalMode) { builder.addDouble(2, proposalMode, 0.0); }
  public static void addProposalCertainty(FlatBufferBuilder builder, double proposalCertainty) { builder.addDouble(3, proposalCertainty, 0.0); }
  public static int endUniformContinuous(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

