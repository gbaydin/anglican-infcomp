// automatically generated by the FlatBuffers compiler, do not modify

package infcomp.protocol;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ProposalRequest extends Table {
  public static ProposalRequest getRootAsProposalRequest(ByteBuffer _bb) { return getRootAsProposalRequest(_bb, new ProposalRequest()); }
  public static ProposalRequest getRootAsProposalRequest(ByteBuffer _bb, ProposalRequest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public ProposalRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Sample currentSample() { return currentSample(new Sample()); }
  public Sample currentSample(Sample obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Sample previousSample() { return previousSample(new Sample()); }
  public Sample previousSample(Sample obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createProposalRequest(FlatBufferBuilder builder,
      int current_sampleOffset,
      int previous_sampleOffset) {
    builder.startObject(2);
    ProposalRequest.addPreviousSample(builder, previous_sampleOffset);
    ProposalRequest.addCurrentSample(builder, current_sampleOffset);
    return ProposalRequest.endProposalRequest(builder);
  }

  public static void startProposalRequest(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addCurrentSample(FlatBufferBuilder builder, int currentSampleOffset) { builder.addOffset(0, currentSampleOffset, 0); }
  public static void addPreviousSample(FlatBufferBuilder builder, int previousSampleOffset) { builder.addOffset(1, previousSampleOffset, 0); }
  public static int endProposalRequest(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

