// automatically generated by the FlatBuffers compiler, do not modify

package infcomp.protocol;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class UniformDiscrete extends Table {
  public static UniformDiscrete getRootAsUniformDiscrete(ByteBuffer _bb) { return getRootAsUniformDiscrete(_bb, new UniformDiscrete()); }
  public static UniformDiscrete getRootAsUniformDiscrete(ByteBuffer _bb, UniformDiscrete obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public UniformDiscrete __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int priorMin() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int priorSize() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public NDArray proposalProbabilities() { return proposalProbabilities(new NDArray()); }
  public NDArray proposalProbabilities(NDArray obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createUniformDiscrete(FlatBufferBuilder builder,
      int prior_min,
      int prior_size,
      int proposal_probabilitiesOffset) {
    builder.startObject(3);
    UniformDiscrete.addProposalProbabilities(builder, proposal_probabilitiesOffset);
    UniformDiscrete.addPriorSize(builder, prior_size);
    UniformDiscrete.addPriorMin(builder, prior_min);
    return UniformDiscrete.endUniformDiscrete(builder);
  }

  public static void startUniformDiscrete(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addPriorMin(FlatBufferBuilder builder, int priorMin) { builder.addInt(0, priorMin, 0); }
  public static void addPriorSize(FlatBufferBuilder builder, int priorSize) { builder.addInt(1, priorSize, 0); }
  public static void addProposalProbabilities(FlatBufferBuilder builder, int proposalProbabilitiesOffset) { builder.addOffset(2, proposalProbabilitiesOffset, 0); }
  public static int endUniformDiscrete(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

