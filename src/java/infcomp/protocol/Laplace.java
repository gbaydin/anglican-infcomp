// automatically generated by the FlatBuffers compiler, do not modify

package infcomp.protocol;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Laplace extends Table {
  public static Laplace getRootAsLaplace(ByteBuffer _bb) { return getRootAsLaplace(_bb, new Laplace()); }
  public static Laplace getRootAsLaplace(ByteBuffer _bb, Laplace obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Laplace __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double priorLocation() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double priorScale() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double proposalLocation() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double proposalScale() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createLaplace(FlatBufferBuilder builder,
      double prior_location,
      double prior_scale,
      double proposal_location,
      double proposal_scale) {
    builder.startObject(4);
    Laplace.addProposalScale(builder, proposal_scale);
    Laplace.addProposalLocation(builder, proposal_location);
    Laplace.addPriorScale(builder, prior_scale);
    Laplace.addPriorLocation(builder, prior_location);
    return Laplace.endLaplace(builder);
  }

  public static void startLaplace(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addPriorLocation(FlatBufferBuilder builder, double priorLocation) { builder.addDouble(0, priorLocation, 0.0); }
  public static void addPriorScale(FlatBufferBuilder builder, double priorScale) { builder.addDouble(1, priorScale, 0.0); }
  public static void addProposalLocation(FlatBufferBuilder builder, double proposalLocation) { builder.addDouble(2, proposalLocation, 0.0); }
  public static void addProposalScale(FlatBufferBuilder builder, double proposalScale) { builder.addDouble(3, proposalScale, 0.0); }
  public static int endLaplace(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

