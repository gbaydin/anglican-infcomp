// automatically generated by the FlatBuffers compiler, do not modify

package infcomp.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Trace extends Table {
  public static Trace getRootAsTrace(ByteBuffer _bb) { return getRootAsTrace(_bb, new Trace()); }
  public static Trace getRootAsTrace(ByteBuffer _bb, Trace obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Trace __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public NDArray observes() { return observes(new NDArray()); }
  public NDArray observes(NDArray obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public Sample samples(int j) { return samples(new Sample(), j); }
  public Sample samples(Sample obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int samplesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createTrace(FlatBufferBuilder builder,
      int observesOffset,
      int samplesOffset) {
    builder.startObject(2);
    Trace.addSamples(builder, samplesOffset);
    Trace.addObserves(builder, observesOffset);
    return Trace.endTrace(builder);
  }

  public static void startTrace(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addObserves(FlatBufferBuilder builder, int observesOffset) { builder.addOffset(0, observesOffset, 0); }
  public static void addSamples(FlatBufferBuilder builder, int samplesOffset) { builder.addOffset(1, samplesOffset, 0); }
  public static int createSamplesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSamplesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endTrace(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

