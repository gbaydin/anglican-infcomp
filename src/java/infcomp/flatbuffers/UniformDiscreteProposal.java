// automatically generated by the FlatBuffers compiler, do not modify

package infcomp.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class UniformDiscreteProposal extends Table {
  public static UniformDiscreteProposal getRootAsUniformDiscreteProposal(ByteBuffer _bb) { return getRootAsUniformDiscreteProposal(_bb, new UniformDiscreteProposal()); }
  public static UniformDiscreteProposal getRootAsUniformDiscreteProposal(ByteBuffer _bb, UniformDiscreteProposal obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public UniformDiscreteProposal __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int min() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int max() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public NDArray probabilities() { return probabilities(new NDArray()); }
  public NDArray probabilities(NDArray obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createUniformDiscreteProposal(FlatBufferBuilder builder,
      int min,
      int max,
      int probabilitiesOffset) {
    builder.startObject(3);
    UniformDiscreteProposal.addProbabilities(builder, probabilitiesOffset);
    UniformDiscreteProposal.addMax(builder, max);
    UniformDiscreteProposal.addMin(builder, min);
    return UniformDiscreteProposal.endUniformDiscreteProposal(builder);
  }

  public static void startUniformDiscreteProposal(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addMin(FlatBufferBuilder builder, int min) { builder.addInt(0, min, 0); }
  public static void addMax(FlatBufferBuilder builder, int max) { builder.addInt(1, max, 0); }
  public static void addProbabilities(FlatBufferBuilder builder, int probabilitiesOffset) { builder.addOffset(2, probabilitiesOffset, 0); }
  public static int endUniformDiscreteProposal(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

