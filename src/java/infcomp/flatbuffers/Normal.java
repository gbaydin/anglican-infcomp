// automatically generated by the FlatBuffers compiler, do not modify

package infcomp.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Normal extends Table {
  public static Normal getRootAsNormal(ByteBuffer _bb) { return getRootAsNormal(_bb, new Normal()); }
  public static Normal getRootAsNormal(ByteBuffer _bb, Normal obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Normal __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double priorMean() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double priorStd() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double proposalMean() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double proposalStd() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createNormal(FlatBufferBuilder builder,
      double prior_mean,
      double prior_std,
      double proposal_mean,
      double proposal_std) {
    builder.startObject(4);
    Normal.addProposalStd(builder, proposal_std);
    Normal.addProposalMean(builder, proposal_mean);
    Normal.addPriorStd(builder, prior_std);
    Normal.addPriorMean(builder, prior_mean);
    return Normal.endNormal(builder);
  }

  public static void startNormal(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addPriorMean(FlatBufferBuilder builder, double priorMean) { builder.addDouble(0, priorMean, 0.0); }
  public static void addPriorStd(FlatBufferBuilder builder, double priorStd) { builder.addDouble(1, priorStd, 0.0); }
  public static void addProposalMean(FlatBufferBuilder builder, double proposalMean) { builder.addDouble(2, proposalMean, 0.0); }
  public static void addProposalStd(FlatBufferBuilder builder, double proposalStd) { builder.addDouble(3, proposalStd, 0.0); }
  public static int endNormal(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

